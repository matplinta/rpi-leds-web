#!/usr/bin/python3 
import pigpio
import sys
import argparse
from PyQt5.QtWidgets import QMainWindow, QApplication, QColorDialog

RED_PIN     = 19
GREEN_PIN   = 13
BLUE_PIN    = 12
LED_FREQ    = 800
COLOR_CONFIG_FILE = "/home/pi/.config/leds/colours.conf"

def parse_file(filename):
    with open(filename, "r") as fp:
        colorDict = {}
        lines = fp.readlines()
        for line in lines:
            line = "".join(filter(lambda char: char not in "[],", line.strip()))
            line = line.split()
            try:
                colorDict[line[0]] = [int(line[1]), int(line[2]), int(line[3])]
            except ValueError:
                print("Error parsing values.")
                continue                
    return colorDict

class Leds:
    def __init__(self):
        
        self.pi = pigpio.pi()

    def get_color(self):
        self.app = QApplication(sys.argv)
        color = QColorDialog.getColor().getRgb()
        rgbDutyCycle = color
        print(rgbDutyCycle)
        return rgbDutyCycle

    def input_color(self):
        colRed      = int(input("Input red colour: "))
        colGreen    = int(input("Input green colour: "))
        colBlue     = int(input("Input blue colour: "))
        return [colRed, colGreen, colBlue]

    def set_color(self, color, freq=None):
        # self.pi.hardware_PWM(RED_PIN,    LED_FREQ, color[0])
        # self.pi.hardware_PWM(GREEN_PIN,  LED_FREQ, color[1])
        # self.pi.hardware_PWM(BLUE_PIN,   LED_FREQ, color[2])
        freq = LED_FREQ if freq is None else freq
        self.pi.set_PWM_frequency(RED_PIN, freq)
        self.pi.set_PWM_frequency(GREEN_PIN, freq)
        self.pi.set_PWM_frequency(BLUE_PIN, freq)
        print(color)
        if isinstance(color, str):
            hex_color = color.lstrip('#')
            color = tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))
            print(color)
        elif isinstance(color, (list, tuple)):
            pass
        else:
            raise ValueError("Color is neither a string nor a 3 element list or tuple!")
        self.pi.set_PWM_dutycycle(RED_PIN, color[0])
        self.pi.set_PWM_dutycycle(GREEN_PIN, color[1])
        self.pi.set_PWM_dutycycle(BLUE_PIN, color[2])
        
    def predefined(self, color):
        colorDict = parse_file(COLOR_CONFIG_FILE)
        if (color == "none"):  
            for key in colorDict.keys():
                print(key)
        else:
            print(colorDict[color])
            self.set_color(colorDict[color])

    def stop(self):
        self.set_color([0, 0, 0], freq=0)

    def main(self):
        parser = argparse.ArgumentParser()
        parser.add_argument('-i', '--input_manual', action='store_true')
        parser.add_argument('-s', '--stop', action='store_true')
        parser.add_argument('-m', '--manual', nargs=3, type=int)
        parser.add_argument('--hex', type=str)
        parser.add_argument('-p', '--predefined', nargs='?', const="none")
        args = parser.parse_args()

        if(args.input_manual):
            self.set_color(self.input_color())
        elif(args.manual):
            self.set_color(args.manual)
        elif(args.hex):
            self.set_color(args.hex)
        elif(args.stop):
            self.stop()
        elif(args.predefined):
            self.predefined(args.predefined)
        else:
            self.set_color(self.get_color())

instance = Leds()
instance.main()
